}
TAIL_THRESHOLD = 0.25
# Standardize data to range between 0.1 to 1
standardizedData=x
mins=apply(standardizedData, 2, min)
maxs=apply(standardizedData, 2, max)
standardizedData=t((t(standardizedData)-mins)/(maxs-mins))*0.9+0.1
#Get unique classes
classes = sort(unique(y))
#Calculate appropriate plot matrix size
if (is.na(mfrow)) {
classLength = length(classes)
sqSize = ceiling(sqrt(classLength))
if (sqSize*(sqSize-1) >= classLength)
mfrow = c(sqSize-1, sqSize)
else
mfrow = c(sqSize, sqSize)
}
#Save previous values
prevPars = par(c("mfrow", "oma", "mar"))
par(mfrow=mfrow,
oma = oma,
mar = mar)
nCols = dim(x)[2]+1
#Calculate q25, q50 and q75
q25 = aggregate(standardizedData, list(classes=y), quantile, .25)[,2:nCols]
q75 = aggregate(standardizedData, list(classes=y), quantile, .75)[,2:nCols]
if (plot.median) {
q50 = aggregate(standardizedData, list(classes=y), quantile, .50)[,2:nCols]
}
#Remove outlier to calculate q0 and q100
iqr = q75-q25
outlier_min = q25 - 1.5*iqr
outlier_max = q75 + 1.5*iqr
reps_min=join(data.frame(classes=y), cbind(classes,outlier_min), by="classes")
reps_max=join(data.frame(classes=y), cbind(classes,outlier_max), by="classes")
mask = standardizedData<reps_min[,2:nCols] | standardizedData>reps_max[,2:nCols]
masked = standardizedData
masked[mask] = NA
q0=aggregate(masked, list(classes=y), min, na.rm=TRUE)[, 2:nCols]
q100=aggregate(masked, list(classes=y), max, na.rm=TRUE)[, 2:nCols]
# Calculate angle alpha for transforming values
# to coordinates for drawing lines and polygons
nCols = dim(x)[2]
nClasses = length(classes)
alpha = (pi/2) + pi*2*0:(nCols-1)/nCols
alphaClasses = rep((pi/2) + pi*2*0:(nCols-1)/nCols, each=nClasses)
# Transform values into coordinates
x1 = cos(alphaClasses)*q0
y1 = sin(alphaClasses)*q0
x2 = cos(alphaClasses)*q25
y2 = sin(alphaClasses)*q25
x3 = cos(alphaClasses)*q75
y3 = sin(alphaClasses)*q75
x4 = cos(alphaClasses)*q100
y4 = sin(alphaClasses)*q100
# Replicate last coordinate to close polygons
x1 = cbind(x1,x1[,1])
y1 = cbind(y1,y1[,1])
x2 = cbind(x2, x2[,1])
y2 = cbind(y2, y2[,1])
x3 = cbind(x3,x3[,1])
y3 = cbind(y3,y3[,1])
x4 = cbind(x4,x4[,1])
y4 = cbind(y4,y4[,1])
# Get points for outliers
nRows = dim(x)[1]
indices=0:length(mask)
maskedIndices=indices[as.vector(mask)]
colsOutliers = floor(maskedIndices / nRows) + 1
rowsOutliers = (maskedIndices %% nRows) + 1
outliersAlpha=alpha[colsOutliers]
dataOutliers = standardizedData[mask]
xOut = cos(outliersAlpha)*dataOutliers
yOut = sin(outliersAlpha)*dataOutliers
outliers = data.frame(classes=y[rowsOutliers], x=xOut, y=yOut)
if (plot.median) {
medX = cos(alphaClasses)*q50
medY = sin(alphaClasses)*q50
medX = cbind(medX,medX[,1])
medY = cbind(medY,medY[,1])
}
for (classes_i in 1:length(classes)) {
data2=x[1:2,]
data2[1,]=0
data2[2,]=1
fmsb::radarchart(df=data2, lwd=4, maxmin=FALSE, pcol = rgb(1,0,0,0))
title(main = classes[classes_i])
scales::col2hcl(col[1])
rgb2hsv(col2rgb(col[1]))
col1 = col[1]
col1_pale = scales::alpha(col1, 0.6)
col2 =  col[2]
col2_alph = scales::alpha(col2, 0.6)
col1_alpha = scales::alpha(col[1], 0.5)
polygon(c(x3[classes_i,], x2[classes_i,]), c(y3[classes_i,], y2[classes_i,]), col=col1_pale, border=NA, fillOddEven = TRUE)
polygon(c(x4[classes_i,], x3[classes_i,]), c(y4[classes_i,], y3[classes_i,]), col=col2_alph, border=NA, fillOddEven = TRUE)
polygon(c(x1[classes_i,], x2[classes_i,]), c(y1[classes_i,], y2[classes_i,]), col=col2_alph, border=NA, fillOddEven = TRUE)
lines(x3[classes_i,], y3[classes_i,], col=col1, lwd=1.8)
lines(x2[classes_i,], y2[classes_i,], col=col1, lwd=1.8)
if (plot.median) {
col3 = rgb(0,0,0)
if (length(col) > 2)
col3 = col[3]
lines(medX[classes_i,], medY[classes_i,], col=col3)
}
class_name = classes[classes_i]
outlierClassMask = outliers$classes==class_name
points(outliers[outlierClassMask,"x"], outliers[outlierClassMask,"y"])
}
par(prevPars)
}
radarBoxplot(classes ~ ., mockData, col=c("red", "blue"), use.ggplot2=T, mfrow=c(4, 4))
radarBoxplot(classes ~ ., mockData, col=c("red", "blue"), use.ggplot2=F, mfrow=c(4, 4))
radarBoxplot(classes ~ ., mockData, col=c("red", "blue"), use.ggplot2=T, mfrow=c(4, 4))
setwd
setwd("..")
install("radarBoxplot")
library("devtools")
install("radarBoxplot")
rm(ls())
library("devtools")
install("radarBoxplot")
radarBoxplot
document()
setwd
getwd('.')
getwd()
S3method
setwd("C:/Users/caioh/Desktop/Doutorado/Scripts/R/radarBoxplot")
document()
install('.')
?radarBoxplot
document()
?radarBoxplot
document()
install('.')
?radarBoxplot
?radarBoxplot
document()
install('.')
?radarBoxplot
radarBoxplot
radarBoxplot
radarBoxplot
library("devtools")
devtools::install_github("caiohamamura/radarBoxplot-R")
radarBoxplot
radarBoxplot::radarBoxplot(Species ~ ., iris)
setwd("C:/Users/caioh/Desktop/Doutorado/Scripts/R/radarBoxplot")
devtools::install_github("caiohamamura/radarBoxplot-R")
radarBoxplot::radarBoxplot(Species ~ ., iris)
"radarBoxplot.formula" = function(formula, data, ..., subset, na.action=na.fail) {
### formula interface for radarBoxplot
### code gratefully stolen from randomForest.formula (package randomForest).
###
if (!inherits(formula, "formula"))
stop("method is only for formula objects")
m <- match.call(expand.dots = FALSE)
## Catch xtest and ytest in arguments.
if (any(c("xtest", "ytest") %in% names(m)))
stop("xtest/ytest not supported through the formula interface")
names(m)[2] <- "formula"
if (is.matrix(eval(m$data, parent.frame())))
m$data <- as.data.frame(data)
m$... <- NULL
m$na.action <- na.action
m[[1]] <- as.name("model.frame")
m <- eval(m, parent.frame())
y <- model.response(m)
Terms <- attr(m, "terms")
attr(Terms, "intercept") <- 0
attr(y, "na.action") <- attr(m, "na.action")
## Drop any "negative" terms in the formula.
m <- model.frame(terms(reformulate(attributes(Terms)$term.labels)),
data.frame(m))
## if (!is.null(y)) m <- m[, -1, drop=FALSE]
for (i in seq(along=m)) {
if (is.ordered(m[[i]])) m[[i]] <- as.numeric(m[[i]])
}
radarBoxplot.default(m, y, ...)
}
document()
documentation()
document()
library(devtools)
document()
install(".")
document()
install(".")
document()
devtools::document()
devtools::install('.')
?radarBoxplot::radarBoxplot
devtools::document()
devtools::install('.')
devtools::document()
devtools::install('.')
radarBoxplot(classes ~ ., mockData, col=c("red", "blue"), use.ggplot2=T, mfrow=c(4, 4))
radarBoxplot(Species ~ ., iris)
radarBoxplot(Species ~ ., iris, use.ggplot2=F)
radarBoxplot(Species ~ ., iris, use.ggplot2=F)
devtools::document()
devtools::install('.')
radarBoxplot(Species ~ ., iris, use.ggplot2=F)
radarBoxplot(Species ~ ., iris, use.ggplot2=T)
filter()
filter
join()
plyr::join()
devtools::install_github("caiohamamura", "radarBoxplot-R")
devtools::install_github_user("caiohamamura", "radarBoxplot-R")
devtools::install_github("caiohamamura/radarBoxplot-R")
radarBoxplot(Species ~ ., iris, use.ggplot2=F)
radarBoxplot::radarBoxplot(Species ~ ., iris, use.ggplot2=F)
devtools::install_github("caiohamamura/radarBoxplot-R")
radarBoxplot::radarBoxplot(Species ~ ., iris, use.ggplot2=F)
devtools::install_github("caiohamamura/radarBoxplot-R")
devtools::install_github("caiohamamura/radarBoxplot-R")
devtools::install_github("caiohamamura/radarBoxplot-R")
devtools::install_github("caiohamamura/radarBoxplot-R")
radarBoxplot::radarBoxplot(Species ~ ., iris, use.ggplot2=F)
devtools::install_github("caiohamamura/radarBoxplot-R")
radarBoxplot::radarBoxplot(Species ~ ., iris, use.ggplot2=F)
radarBoxplot::radarBoxplot(Species ~ ., iris, use.ggplot2=T)
set.seed(3789032)
randomValues = rbind(floor(runif(16)*100)+1, floor(runif(16)*20+5))
vals=apply(randomValues, 2, function(x) do.call(rnorm, as.list(c(100,x))))
attr1=as.vector(unlist(vals))
randomValues = rbind(floor(runif(16)*100)+1, floor(runif(16)*20+5))
vals=apply(randomValues, 2, function(x) do.call(rnorm, as.list(c(100,x))))
attr2=as.vector(unlist(vals))
randomValues = rbind(floor(runif(16)*100)+1, floor(runif(16)*20+5))
vals=apply(randomValues, 2, function(x) do.call(rnorm, as.list(c(100,x))))
attr3=as.vector(unlist(vals))
randomValues = rbind(floor(runif(16)*100)+1, floor(runif(16)*20+5))
vals=apply(randomValues, 2, function(x) do.call(rnorm, as.list(c(100,x))))
attr4=as.vector(unlist(vals))
randomValues = rbind(floor(runif(16)*100)+1, floor(runif(16)*20+5))
vals=apply(randomValues, 2, function(x) do.call(rnorm, as.list(c(100,x))))
attr5=as.vector(unlist(vals))
randomValues = rbind(floor(runif(16)*100)+1, floor(runif(16)*20+5))
vals=apply(randomValues, 2, function(x) do.call(rnorm, as.list(c(100,x))))
attr6=as.vector(unlist(vals))
mockData=data.frame(classes=as.factor(rep(1:16, each=100)), attr1=attr1, attr2, attr3, attr4, attr5, attr6)
head(mockData)
ordem = order(as.vector(by(mockData$attr1, mockData$classes,FUN=median)))
ordem = order(as.vector(aggregate(mockData$attr1, list(classes=mockData$classes), median)))
library(ggplot2)
ggplot(mockData, aes(y=attr1, x=classes)) +
geom_boxplot() +
ylab("Values") +
xlab("Classes") +
scale_x_discrete(limits=ordem)
mockData
ggplot(mockData, aes(y=attr1, x=reorder(classes, attr1, FUN = median))) +
geom_boxplot() +
ylab("Values") +
xlab("Classes") +
scale_x_discrete(limits=ordem)
ggplot(mockData, aes(y=attr1, x=reorder(classes, attr1, FUN = median))) +
geom_boxplot() +
ylab("Values") +
xlab("Classes")
ordem
ggplot(mockData, aes(y=attr1, x=reorder(classes, attr1, FUN = median))) +
geom_boxplot() +
ylab("Values") +
xlab("Classes") +
scale_x_discrete(limits=ordem)
ggplot(mockData, aes(y=attr1, x=reorder(classes, attr1, FUN = median))) +
geom_boxplot() +
ylab("Values") +
xlab("Classes") +
scale_x_discrete(order=ordem)
ggplot(mockData, aes(y=attr1, x=reorder(classes, attr1, FUN = median))) +
geom_boxplot() +
ylab("Values") +
xlab("Classes") +
scale_x_discrete(breaks=ordem)
ggplot(mockData, aes(y=attr1, x=classes)) +
geom_boxplot() +
ylab("Values") +
xlab("Classes") +
scale_x_discrete(breaks=ordem)
ggplot(mockData, aes(y=attr1, x=classes)) +
geom_boxplot() +
ylab("Values") +
xlab("Classes") +
scale_x_discrete(ticks=ordem)
ggplot(mockData, aes(y=attr1, x=classes)) +
geom_boxplot() +
ylab("Values") +
xlab("Classes") +
scale_x_discrete(labels=ordem)
ggplot(mockData, aes(y=attr1, x=classes)) +
geom_boxplot() +
ylab("Values") +
xlab("Classes") +
scale_x_discrete(breaks=ordem)
ggplot(mockData, aes(y=attr1, x=classes)) +
geom_boxplot() +
ylab("Values") +
xlab("Classes") +
scale_x_discrete(limits=ordem)
library(ggplot2)
ggplot(mockData, aes(y=attr1, x=reorder(classes, attr1, FUN = median))) +
geom_boxplot() +
ylab("Values") +
xlab("Classes") +
scale_x_discrete(limits=ordem)
ggplot(mockData, aes(y=attr1, x=reorder(classes, attr1, FUN = median))) +
geom_boxplot() +
ylab("Values") +
xlab("Classes")
ggplot(mockData, aes(y=attr1, x=reorder(classes, attr1, FUN = median))) +
geom_boxplot() +
ylab("Values") +
xlab("Classes") +
scale_x_discrete(limits=ordem)
ggplot(mockData, aes(y=attr1, x=classes)) +
geom_boxplot() +
ylab("Values") +
xlab("Classes") +
scale_x_discrete(limits=ordem)
ggplot(mockData, aes(y=attr1, x=classes)) +
geom_boxplot() +
ylab("Values") +
xlab("Classes") +
scale_x_discrete(breaks=ordem)
ordem
ordem = order(aggregate(classes ~ attr1, mockData))
ordem
mockData$classes <- factor(mockData$classes, levels = ordem)
library(ggplot2)
ggplot(mockData, aes(y=attr1, x=classes)) +
geom_boxplot() +
ylab("Values") +
xlab("Classes") +
scale_x_discrete(breaks=ordem)
ggplot(mockData, aes(y=attr1, x=classes)) +
geom_boxplot() +
ylab("Values") +
xlab("Classes")
classes =  names(mockData$classes)[ordem]
classes
mockData$classes
classes =  mockData$classes[ordem]
classes
mockData$classes <- factor(mockData$classes, levels = ordem)
ggplot(mockData, aes(y=attr1, x=classes)) +
geom_boxplot() +
ylab("Values") +
xlab("Classes")
ggplot(mockData, aes(x=classes)) +
geom_boxplot() +
ylab("Values") +
xlab("Classes")
ggplot(mockData, aes(classes)) +
geom_boxplot() +
ylab("Values") +
xlab("Classes")
ggplot(mockData, aes(y=attr1, x=classes)) +
geom_boxplot() +
ylab("Values") +
xlab("Classes")
classes
ggplot(mockData, aes(y=attr1, x=classes)) +
geom_boxplot() +
ylab("Values") +
xlab("Classes") +
scale_x_discrete(limits=classes)
ggplot(mockData, aes(y=attr1, x=classes)) +
geom_boxplot() +
ylab("Values") +
xlab("Classes") +
scale_x_discrete(limits=ordem)
ordem
unique(mockData$classes)
mockData=data.frame(classes=as.factor(rep(1:16, each=100)), attr1=attr1, attr2, attr3, attr4, attr5, attr6)
head(mockData)
ordem = order(aggregate(classes ~ attr1, mockData))
ordem
unique=mockData$classes
unique
unique=mockData$classes
unique
mockData=data.frame(classes=rep(1:16, each=100), attr1=attr1, attr2, attr3, attr4, attr5, attr6)
unique=mockData$classes
unique
mockData=data.frame(classes=rep(1:16, each=100), attr1=attr1, attr2, attr3, attr4, attr5, attr6)
unique=mockData$classes
unique
rm(unique)
uniques=unique(mockData$classes)
uniques
ordem = order(aggregate(classes ~ attr1, mockData, median))
ordem
aggregate(classes ~ attr1, mockData, median)
aggregate(attr1 ~classes, mockData, median)
ordem = order(aggregate(attr1 ~ classes, mockData, median))
ordem
aggregate(attr1 ~ classes, mockData, median)
ordem = order(aggregate(attr1 ~ classes, mockData, median), by="attr1")
ordem = order(aggregate(attr1 ~ classes, mockData, median), "attr1")
aggregate(attr1 ~ classes, mockData, median)[, 2]
aggregate(attr1 ~ classes, mockData, median)[, 1]
sort(aggregate(attr1 ~ classes, mockData, median)[, 1])
sort(aggregate(attr1 ~ classes, mockData, median)[, 2])
order(aggregate(attr1 ~ classes, mockData, median)[, 2])
ordem = order(aggregate(attr1 ~ classes, mockData, median)[, 2])
ggplot(mockData, aes(y=attr1, x=classes)) +
geom_boxplot() +
ylab("Values") +
xlab("Classes") +
scale_x_discrete(limits=ordem)
ordem
ordem[1]
ordem[2]
ggplot(mockData, aes(y=attr1, x=classes)) +
geom_boxplot() +
ylab("Values") +
xlab("Classes")
mockData=data.frame(classes=as.factor(rep(1:16, each=100)), attr1=attr1, attr2, attr3, attr4, attr5, attr6)
head(mockData)
uniques=unique(mockData$classes)
ordem = order(aggregate(attr1 ~ classes, mockData, median)[, 2])
ordem
uniques[ordem]
ggplot(mockData, aes(y=attr1, x=classes)) +
geom_boxplot() +
ylab("Values") +
xlab("Classes") +
scale_x_discrete(limits=ordem)
radarBoxplot::radarBoxplot(Species ~ ., iris, use.ggplot2=T)
radarBoxplot::radarBoxplot(Species ~ ., iris, use.ggplot2=F)
radarBoxplot::radarBoxplot(Species ~ ., iris, use.ggplot2=T)
?radarBoxplot::radarBoxplot
devtools::document()
devtools::install('.')
?radarBoxplot
?radarBoxplot::radarBoxplot
devtools::install('.')
?radarBoxplot::radarBoxplot
?randomForest::randomForest
devtools::document()
?randomForest::randomForest
?radarBoxplot::radarBoxplot
devtools::document()
?radarBoxplot::radarBoxplot
devtools::document()
?radarBoxplot::radarBoxplot
devtools::document()
?radarBoxplot::radarBoxplot
devtools::document()
?radarBoxplot::radarBoxplot
devtools::document()
?radarBoxplot::radarBoxplot
?radarBoxplot::radarBoxplot
devtools::document()
?radarBoxplot::radarBoxplot
?radarBoxplot::radarBoxplot
devtools::document()
?radarBoxplot::radarBoxplot
devtools::document()
?radarBoxplot::radarBoxplot
devtools::document()
?radarBoxplot::radarBoxplot
devtools::build()
is.installed('ggplot2')
requireNamespace("ggplot2")
?rgb
devtools::build()
?quantile
?par
magrittr::"%>%"
scaled.data <-
x magrittr::"%>%"
lapply(scale_zero_to_one) magrittr::"%>%"
as.data.frame magrittr::"%>%"
cbind(classes=y)  magrittr::%>%
melt(id.vars="classes")
"magrittr"::"%>%"
scaled.data <-
x %>%
lapply(scale_zero_to_one) magrittr::"%>%"
as.data.frame magrittr::"%>%"
cbind(classes=y)  magrittr::%>%
melt(id.vars="classes")
magrittr::"%>%"
require(test)
library(radarBoxplot)
?radarBoxplot::radarBoxplot
na.action
na.action()
radarBoxplot::radarBoxplot.formula
install.packages("testthat")
library(radarBoxplot)
library(radarBoxplot)
radarBoxplot(Species ~ ., iris)
radarBoxplot.formula(Species ~ ., iris)
library(radarBoxplot)
radarBoxplot(Species ~ ., iris)
radarBoxplot(Species ~ ., iris, use.ggplot2=F)
radarBoxplot(Species ~ ., iris)
radarBoxplot(Species ~ ., iris, use.ggplot2=F)
library(radarBoxplot)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?radarBoxplot
